@model IEnumerable<Movie_Vote_Data.DbLayer.Movie>
@using System.Reflection;
@using System.ComponentModel.DataAnnotations;

@{
    ViewBag.Title = "Всі фільми";
    var props = Model.First().GetType().GetProperties(BindingFlags.IgnoreCase | BindingFlags.Public | BindingFlags.Instance);
}

<h2>Список фільмів</h2>

<p>
    @Html.ActionLink("Create New", "Create") | @Html.ActionLink("Logout", "Logout", "Admin")
</p>
<table class="table">
    <tr>
        @foreach (var item in props)
        {
            bool ascending = ViewBag.FilterName == item.Name && !ViewBag.IsFilterAscending ? true : false;
            string name = item.Name;
            var displayName = item.GetCustomAttribute(typeof(DisplayAttribute)) as DisplayAttribute;
            if (displayName != null)
            {
                name = displayName.Name;
            }
            <th>
                <a id="@item.Name" href="@Url.Action("Index", "Movie", new { filterName = item.Name, isFilterAscending = ascending })">
                    @name
                    @if(ViewBag.FilterName == item.Name)
                    {
                        @(ViewBag.IsFilterAscending? MvcHtmlString.Create("<span class=\"glyphicon glyphicon-chevron-up\"></span>"):
                            MvcHtmlString.Create("<span class=\"glyphicon glyphicon-chevron-down\"></span>"))
                    }
                </a>
            </th>
        }
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            @foreach (var prop in props)
            {
                var propValue = prop.GetValue(item);
                <td>
                    @if (propValue!=null)
                    {
                        if (prop.PropertyType.IsEquivalentTo(typeof(short)))
                        {
                            @propValue
                        }
                        else if (prop.PropertyType.IsEquivalentTo(typeof(Nullable<DateTime>)))
                        {
                            @((propValue as DateTime?).ToString())
                        }
                        else
                        {
                            @Html.DisplayFor(x => propValue)
                        }
                    }                  
                </td>
            }
            <td>
                <a href="@Url.Action("Edit","Movie", new { id = item.Id })" class="glyphicon glyphicon-edit text-info"></a> |
                <a href="@Url.Action("Delete","Movie", new { id = item.Id })" class="glyphicon glyphicon-remove text-danger"></a>
            </td>
        </tr>
    }

</table>

@{
            int pages = (int)ViewBag.Pages;
            if (pages > 1)
            {
        <div class="text-center">
            <div id="pagination" class="t-nocturnal-purple">
                <div class="loadingDots">
                    <span class="dot"></span>
                    <span class="dot"></span>
                    <span class="dot"></span>
                </div>
            </div>
        </div>
    }
}

@section scripts {
    <script src="~/Scripts/jquery-3.1.1.min.js"></script>
    <script src="~/Scripts/bootstrap.min.js"></script>
    <script src="~/Scripts/pagination.js"></script>
    <script>
        $(function () {
            $("#pagination").pagination('@Url.Action("Index", "Movie")', @ViewBag.Pages, {
                currentPage:@ViewBag.Page,
                urlParameters: {
                    filterName: '@ViewBag.FilterName',
                    isFilterAscending: '@ViewBag.IsFilterAscending'
                }
                //paginationStyle:"allPagesShrink"
            });
        });
    </script>
}